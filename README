Paradocx
========

.. contents::

Status and License
------------------

``paradocx`` builds on the Open Office XML Spec provided by openpack to
provide interfaces for working with Microsoft Word documents in the
Office 2007 'docx' format.

``paradocx`` is Copyright (c) 2010 by YouGov Plc. and licensed under
`this license
<http://bitbucket.org/yougov/paradocx/raw/tip/LICENSE>`_.

Introduction
------------

Constructing simple documents using Paradocx is fairly straightforward::

    >>> import paradocx
    >>> doc = paradocx.Document()
    >>> doc.paragraph('Things to do', style='Heading 1')
    <Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}p at 0x22a1240>
    >>> doc.paragraph('First, spend some time learning paradocx usage.')
    <Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}p at 0x22a12d0>
    >>> doc.paragraph('Then, put together some examples')
    <Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}p at 0x22a1240>
    >>> doc.paragraph('Finally, put those examples in the paradocx documentation')
    <Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}p at 0x22a12d0>
    >>> doc.save('mydoc.docx')

Using `part-edit` from `Openpack <http://bitbucket.org/yougov/openpack>`_,
one can see the document that was constructed::

    > EDITOR=cat part-edit mydoc.docx/word/document.xml
    <w:document xmlns:dcterms="http://purl.org/dc/terms/" xmlns:ve="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:dcmitype="http://purl.org/dc/dcmitype/" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main" xmlns:wp="http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing" xmlns:cp="http://schemas.openxmlformats.org/package/2006/metadata/core-properties" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <w:body>
        <w:p>
          <w:pPr>
            <w:pStyle w:val="Heading 1"/>
          </w:pPr>
          <w:r>
            <w:t>Things to do</w:t>
          </w:r>
        </w:p>
        <w:p>
          <w:r>
            <w:t>First, spend some time learning paradocx usage.</w:t>
          </w:r>
        </w:p>
        <w:p>
          <w:r>
            <w:t>Then, put together some examples</w:t>
          </w:r>
        </w:p>
        <w:p>
          <w:r>
            <w:t>Finally, put those examples in the paradocx documentation</w:t>
          </w:r>
        </w:p>
      </w:body>
    </w:document>


One may also append tables to a document::

    >>> import paradocx
    >>> doc = paradocx.Document()
    >>> doc.table([['a', 'b', 'c'], ['1', '2', '3']])
    <Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tbl at 0x2231240>
    >>> doc.save('data.docx')


Object Model and Advanced Usage
-------------------------------

The core object for a Word document is the `paradocx.package.WordPackage`. All
operations involving constructing a Word document use some form of this class
(the `paradocx.Document` subclasses `WordPackage`).

See `the source
<https://bitbucket.org/yougov/paradocx/src/66c96e2251e6/paradocx/package.py?at=default>`_
for a trivial example of usage.

Testing
-------

Paradocx uses `pytest-runner <http://bitbucket.org/jaraco/pytest-runner>`_ for
running the tests. To test, simply invoke::

    python setup.py ptr

Changes
-------

For the list of changes, see `CHANGES in the repository
<http://bitbucket.org/yougov/paradocx/src/tip/CHANGES>`_.
